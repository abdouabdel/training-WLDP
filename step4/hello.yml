apiVersion: v1
kind: Template
labels:
  provider: training-test
  template: "wldp-training-hello"
metadata:
  name: wldp-training-hello
  namespace: training-test
  annotations:
    description: "Application sample Hello from wldp-dev-training"
    iconClass: "icon-python"
    tags: "training,wldp"
parameters:
  - name: SERVICE_NAME
    displayName: "Sample Service Name"
    description: "The name of the OpenShift Service exposed for the hello-openshift"
    value: hello
    required: true
  - name: IMAGE_NS
    displayName: Image namespace
    description: Namespace where hello application is pushed.
    required: true
    value: training-test
  - name: IMAGE_VERSION
    displayName: Image version
    description: The version of the image to use.
    required: true
    value: latest
  - name: SERVICE_ROUTE
    displayName: "Route"
    description: "The route to access to the hello openshift"
objects:
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: ${SERVICE_NAME}
    name: ${SERVICE_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${SERVICE_NAME}
    name: ${SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      app: ${SERVICE_NAME}
      deploymentconfig: ${SERVICE_NAME}
    strategy:
      type: Rolling
      rollingParams:
        timeoutSeconds: 120
        maxSurge: 2
        maxUnavailable: 40%
    template:
      metadata:
        labels:
          app: ${SERVICE_NAME}
          deploymentconfig: ${SERVICE_NAME}
      spec:
        containers:
        - image: 172.30.8.127:5000/${IMAGE_NS}/hello:${IMAGE_VERSION}
          imagePullPolicy: Always
          name: hello
          ports:
          - containerPort: 8080
            protocol: TCP
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
- kind: Route
  apiVersion: v1
  metadata:
    name: ${SERVICE_NAME}
  spec:
    host: ${SERVICE_ROUTE}
    to:
      kind: Service
      name: ${SERVICE_NAME}